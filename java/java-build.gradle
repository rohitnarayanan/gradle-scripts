buildscript {
	repositories {
		jcenter()
		mavenLocal()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}

	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:2.2.1.RELEASE"
	}
}

// core plugins can be applied via shortname/id
apply plugin: "jacoco"

/*
 * Other plugins need to be applied via the plugin class as this script is included in other scripts
 */
apply plugin: org.springframework.boot.gradle.plugin.SpringBootPlugin
apply plugin: io.spring.gradle.dependencymanagement.DependencyManagementPlugin

apply plugin: "maven-publish"

repositories {
	jcenter()
	mavenLocal()
	mavenCentral()
}

def buildTimestamp = new Date().format("yyyyMMdd-hhmmss");

def buildProps = new Properties()
new URL("https://raw.githubusercontent.com/rohitnarayanan/gradle-scripts/master/java/java-build.properties").withInputStream { buildProps.load(it) }
project.ext.gradleVersion = buildProps.getProperty("version.gradle")
project.ext.javaVersion = buildProps.getProperty("version.java")
project.ext.springBootVersion = buildProps.getProperty("version.springboot")


/*
 * Build Settings
 */
compileJava {
	sourceCompatibility = javaVersion
	targetCompatibility = javaVersion
	
	options.compilerArgs += ["-Xlint:unchecked"]
}


test {
	useJUnitPlatform()
}


project.plugins.withId("java-library") {
	bootJar {
		enabled = false
	}
	
	jar {
		enabled = true
		
		from (sourceSets.main.allSource) {
			include '**/*.java'
		}
		
		manifest {
			attributes (
				"build-version": archiveVersion,
				"build-timestamp": buildTimestamp,
				"gradle-version": gradleVersion,
				"java-version": javaVersion,
				"spring-boot-version": springBootVersion
			)
		}
	}
	
	// enable jacoco reports
	test.finalizedBy jacocoTestReport
	
	// publish the artifact to maven
	build.finalizedBy install
}


apply from: "https://raw.githubusercontent.com/rohitnarayanan/gradle-scripts/master/java/eclipse-config.gradle"
